// Calculate and store squares of integers 0-200 in memory
// Uses the sum-of-odd-numbers algorithm (1+3+5+... = nÂ²)
// Memory layout: squares stored consecutively starting at address 2000

addi $t3, $zero, 2000    // Initialize memory pointer (start address for squares)
addi $t4, $zero, 0       // Initialize current number to square (n = 0)
addi $t5, $zero, 2      // Set loop limit (200)

main_loop:
    beq $t4, $t5, done    // If we've processed 200 numbers, exit


// Calculate square of current number (n in $t4)
addi $s0, $zero, 0    // Initialize square result to 0
addi $t0, $zero, 1    // Initialize first odd number (1)
add $t1, $zero, $t4   // Set counter to current n (copied from $t4)
addi t6 0 8994

square_loop:
    beq $t1, $zero, store_result  // When counter reaches 0, we have the square
    add $s0, $s0, $t0  // square += odd
    nop
    nop
    nop
    addi $t0, $t0, 2   // odd += 2 (next odd number)
    addi $t1, $t1, -1  // counter -= 1
    j square_loop

store_result:
    sw $s0, 0($t3)     // Store current square in memory
    addi $t3, $t3, 4   // Increment memory pointer by 4 (next word address)
    addi $t4, $t4, 1   // Increment current number (n += 1)
    j main_loop        // Process next number

done:
    stop                   // Halt the processor