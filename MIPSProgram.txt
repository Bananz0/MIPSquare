addi t0 zero 1000
addi t1 0 50
addi t2 0 23
addi t3 0 31
j end
loop:
    beq t3 t1 done
    addi t3 0 69
    j loop
done:
    sw t2 0(t0)
    addi t3 0 69
    nop
end:
    halt








//addi t1 0 5
//addi t2 0 6
//nop
//add t1 t2 s2
//add t1 s2 s3

//0x20090005
//0x200A0006
//0x012A9020
//0x01329820

//addi t1 0 5  001000(I) 00000(0)[$zer0]   01001(9) [$t1]    0000000000000101
//addi t2 0 6  001000(I) 00000(0)[$zer0]   01010(10)[$t2]    0000000000000110
//add t1 t2 s2 000000(R) 01001(9)[$t1] 01010(10)[$t2] 10010(18)[$s2] 00000 100000
//add t1 s2 s3 000000(R) 01001(9)[$t1] 10010(18)[$s2] 10011(19)[$s3] 00000 100000

//000000 01001 01010 10010 00000 100000
// Instruction Format Shortcuts
// R 000000_sssss_ttttt_ddddd_hhhhh_ffffff
//   opcode   rs     rt     rd   shamt  funct

// I oooooo_sssss_ttttt_iiiiiiiiiiiiiiii
//   opcode   rs     rt       immediate

// J oooooo_aaaaaaaaaaaaaaaaaaaaaaaaaa
//   opcode         target address


//Register shortcuts cause I am lazy :D
// 00000(0)[$zero]
// 00001(1)[$at]
// 00010(2)[$v0]
// 00011(3)[$v1]
// 00100(4)[$a0]
// 00101(5)[$a1]
// 00110(6)[$a2]
// 00111(7)[$a3]
// 01000(8)[$t0]
// 01001(9)[$t1]
// 01010(10)[$t2]
// 01011(11)[$t3]
// 01100(12)[$t4]
// 01101(13)[$t5]
// 01110(14)[$t6]
// 01111(15)[$t7]
// 10000(16)[$s0]
// 10001(17)[$s1]
// 10010(18)[$s2]
// 10011(19)[$s3]
// 10100(20)[$s4]
// 10101(21)[$s5]
// 10110(22)[$s6]
// 10111(23)[$s7]
// 11000(24)[$t8]
// 11001(25)[$t9]
// 11010(26)[$k0]
// 11011(27)[$k1]
// 11100(28)[$gp]
// 11101(29)[$sp]
// 11110(30)[$fp]
// 11111(31)[$ra]

// R-Type Instructions (opcode=000000)
// 100000(0x20)[$add]
// 100010(0x22)[$sub]
// 100100(0x24)[$and]
// 100101(0x25)[$or]
// 101010(0x2A)[$slt]
// 000000(0x00)[$sll]
// 000010(0x02)[$srl]
// 000011(0x03)[$sra]
// 001000(0x08)[$jr]

// I-Type Instructions
// 001000(0x08)[$addi]
// 001100(0x0C)[$slladdi]
// 100011(0x23)[$lw]
// 101011(0x2B)[$sw]
// 000100(0x04)[$beq]
// 000101(0x05)[$bne]

// J-Type Instructions
// 000010(0x02)[$j]
// 000011(0x03)[$jal]